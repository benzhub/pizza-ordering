// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
  relationMode = "prisma"
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255) // varchar(191)
  description String      @db.Text
  price       Int
  thumb       String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model OrderItem {
  id                  String   @id @default(cuid())
  unitPrice           Int
  quantity            Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  assignedToOrderId   String   @db.VarChar(255)
  assignedToOrder     Order    @relation(fields: [assignedToOrderId], references: [id])
  assignedToProductId Int
  assignedToProduct   Product  @relation(fields: [assignedToProductId], references: [id])

  @@index([assignedToOrderId, assignedToProductId])
  @@index([assignedToProductId])
}

enum Status {
  OPEN
  PENDING
  CLOSE
  CANCEL
}

model Order {
  id                String      @id @default(cuid())
  customerName      String      @db.VarChar(255)
  customerPhone     String      @db.VarChar(255)
  customerAddress   String      @db.VarChar(255)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  assignedToUserId  String      @db.VarChar(255)
  assignedToUser    User        @relation(fields: [assignedToUserId], references: [id])
  assignedOrderItem OrderItem[]
  status            Status

  @@index([assignedToUserId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  phone          String?   @unique
  address        String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedOrders Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
